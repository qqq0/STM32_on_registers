
blink_on_registers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000260  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000390  08000398  00010398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000390  08000390  00010398  2**0
                  CONTENTS
  4 .ARM          00000000  08000390  08000390  00010398  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000390  08000398  00010398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000390  08000390  00010390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000394  08000394  00010394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000398  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000398  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010398  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000103c1  2**0
                  CONTENTS, READONLY
 13 .debug_info   000006c3  00000000  00000000  00010404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000236  00000000  00000000  00010ac7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000078  00000000  00000000  00010d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000004c  00000000  00000000  00010d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000010f1  00000000  00000000  00010dc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000009c5  00000000  00000000  00011eb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00004215  00000000  00000000  0001287a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000000d4  00000000  00000000  00016a90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00016b64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000378 	.word	0x08000378

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000378 	.word	0x08000378

08000170 <clk_init>:
 *  Created on: May 3, 2024
 *      Author: Mateusz
 */
#include "clk_config.h"

void clk_init(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	RCC->CR.HSE_ON=HSE_ENABLED; // RCC_CR |= 1<<16;			//set HSE ON
 8000174:	4a1a      	ldr	r2, [pc, #104]	; (80001e0 <clk_init+0x70>)
 8000176:	6813      	ldr	r3, [r2, #0]
 8000178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800017c:	6013      	str	r3, [r2, #0]
	while(RCC->CR.HSE_RDY == HSE_NOT_READY); //while(!(RCC_CR & (1<<17)));	//wait for change
 800017e:	bf00      	nop
 8000180:	4b17      	ldr	r3, [pc, #92]	; (80001e0 <clk_init+0x70>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8000188:	b2db      	uxtb	r3, r3
 800018a:	2b00      	cmp	r3, #0
 800018c:	d0f8      	beq.n	8000180 <clk_init+0x10>
	FLASH->ACR.LATENCY = ACR_LATENCY_0;		//latency - zero wait (0 < sysclk <= 24MHz)
 800018e:	4a15      	ldr	r2, [pc, #84]	; (80001e4 <clk_init+0x74>)
 8000190:	6813      	ldr	r3, [r2, #0]
 8000192:	f36f 0302 	bfc	r3, #0, #3
 8000196:	6013      	str	r3, [r2, #0]
	RCC->CFGR.HPRE = HPRE_Div1;//RCC_CFGR &= ~(1<<7);		// set HPRE to no division
 8000198:	4a11      	ldr	r2, [pc, #68]	; (80001e0 <clk_init+0x70>)
 800019a:	6853      	ldr	r3, [r2, #4]
 800019c:	f36f 1307 	bfc	r3, #4, #4
 80001a0:	6053      	str	r3, [r2, #4]
	RCC->CFGR.PPRE1 = PPRE_Div2; //RCC_CFGR |= 1<<10;			// set PPRE1 to div by 2 (PCLK1 8MHz)
 80001a2:	4a0f      	ldr	r2, [pc, #60]	; (80001e0 <clk_init+0x70>)
 80001a4:	6853      	ldr	r3, [r2, #4]
 80001a6:	2104      	movs	r1, #4
 80001a8:	f361 230a 	bfi	r3, r1, #8, #3
 80001ac:	6053      	str	r3, [r2, #4]
	RCC->CFGR.PPRE2 = PPRE_Div1; //RCC_CFGR &= ~(1<<13);		// set PPRE2 to no div (PCLK2 8MHz)
 80001ae:	4a0c      	ldr	r2, [pc, #48]	; (80001e0 <clk_init+0x70>)
 80001b0:	6853      	ldr	r3, [r2, #4]
 80001b2:	f36f 23cd 	bfc	r3, #11, #3
 80001b6:	6053      	str	r3, [r2, #4]
	RCC->CFGR.SW = SW_HSE; //RCC_CFGR |= 1<<0; 			// set SW to HSE clk
 80001b8:	4a09      	ldr	r2, [pc, #36]	; (80001e0 <clk_init+0x70>)
 80001ba:	6853      	ldr	r3, [r2, #4]
 80001bc:	2101      	movs	r1, #1
 80001be:	f361 0301 	bfi	r3, r1, #0, #2
 80001c2:	6053      	str	r3, [r2, #4]
	while(RCC->CR.HSE_RDY == HSE_NOT_READY);//while(!(RCC_CR & (1<<17)));	// wait until HSE is redy
 80001c4:	bf00      	nop
 80001c6:	4b06      	ldr	r3, [pc, #24]	; (80001e0 <clk_init+0x70>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80001ce:	b2db      	uxtb	r3, r3
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d0f8      	beq.n	80001c6 <clk_init+0x56>
}
 80001d4:	bf00      	nop
 80001d6:	bf00      	nop
 80001d8:	46bd      	mov	sp, r7
 80001da:	bc80      	pop	{r7}
 80001dc:	4770      	bx	lr
 80001de:	bf00      	nop
 80001e0:	40021000 	.word	0x40021000
 80001e4:	40022000 	.word	0x40022000

080001e8 <delay_us>:
}TIM_T;

#define TIM_2 ((TIM_T*)0x40000000)


void delay_us(uint32_t time_us){
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
	TIM_2->CNT = 0;
 80001f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001f4:	2200      	movs	r2, #0
 80001f6:	625a      	str	r2, [r3, #36]	; 0x24
	while(TIM_2->CNT < time_us);
 80001f8:	bf00      	nop
 80001fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000200:	687a      	ldr	r2, [r7, #4]
 8000202:	429a      	cmp	r2, r3
 8000204:	d8f9      	bhi.n	80001fa <delay_us+0x12>
}
 8000206:	bf00      	nop
 8000208:	bf00      	nop
 800020a:	370c      	adds	r7, #12
 800020c:	46bd      	mov	sp, r7
 800020e:	bc80      	pop	{r7}
 8000210:	4770      	bx	lr

08000212 <delay_ms>:

void delay_ms(uint32_t time_ms){
 8000212:	b580      	push	{r7, lr}
 8000214:	b084      	sub	sp, #16
 8000216:	af00      	add	r7, sp, #0
 8000218:	6078      	str	r0, [r7, #4]
	for(uint32_t i=0;i<time_ms;i++){
 800021a:	2300      	movs	r3, #0
 800021c:	60fb      	str	r3, [r7, #12]
 800021e:	e006      	b.n	800022e <delay_ms+0x1c>
	delay_us(1000);	// delay of 1 ms
 8000220:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000224:	f7ff ffe0 	bl	80001e8 <delay_us>
	for(uint32_t i=0;i<time_ms;i++){
 8000228:	68fb      	ldr	r3, [r7, #12]
 800022a:	3301      	adds	r3, #1
 800022c:	60fb      	str	r3, [r7, #12]
 800022e:	68fa      	ldr	r2, [r7, #12]
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	429a      	cmp	r2, r3
 8000234:	d3f4      	bcc.n	8000220 <delay_ms+0xe>
	}
}
 8000236:	bf00      	nop
 8000238:	bf00      	nop
 800023a:	3710      	adds	r7, #16
 800023c:	46bd      	mov	sp, r7
 800023e:	bd80      	pop	{r7, pc}

08000240 <main>:


int main(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
	//clock config
	RCC_APB1ENR |= 1<<28; //enable power to clock
 8000244:	4b22      	ldr	r3, [pc, #136]	; (80002d0 <main+0x90>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a21      	ldr	r2, [pc, #132]	; (80002d0 <main+0x90>)
 800024a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800024e:	6013      	str	r3, [r2, #0]
	clk_init();
 8000250:	f7ff ff8e 	bl	8000170 <clk_init>


	//timer config
	RCC_APB1ENR |= 1<<0; //set (bit 0) -> 1 to enable timer 2 clock
 8000254:	4b1e      	ldr	r3, [pc, #120]	; (80002d0 <main+0x90>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a1d      	ldr	r2, [pc, #116]	; (80002d0 <main+0x90>)
 800025a:	f043 0301 	orr.w	r3, r3, #1
 800025e:	6013      	str	r3, [r2, #0]
	TIM_2->CR1 |= (1<<0); // enable timer CEN (bit 0) -> 1
 8000260:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800026a:	f043 0301 	orr.w	r3, r3, #1
 800026e:	6013      	str	r3, [r2, #0]
	TIM_2->PSC = 8-1; //SET to clk freq in MHz to get us ticks
 8000270:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000274:	2207      	movs	r2, #7
 8000276:	629a      	str	r2, [r3, #40]	; 0x28
	TIM_2->ARR = 0xFFFF;	//MAX ARR
 8000278:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800027c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000280:	62da      	str	r2, [r3, #44]	; 0x2c
	while(!(TIM_2->SR & (1<<0)));	//wait until timer setup is finished
 8000282:	bf00      	nop
 8000284:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000288:	691b      	ldr	r3, [r3, #16]
 800028a:	f003 0301 	and.w	r3, r3, #1
 800028e:	2b00      	cmp	r3, #0
 8000290:	d0f8      	beq.n	8000284 <main+0x44>


	//GPIO config
	RCC_APB2ENR |= RCC_APB2ENR_IOPCEN;	// sets IOPCEN (bit 4) -> 1
 8000292:	4b10      	ldr	r3, [pc, #64]	; (80002d4 <main+0x94>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	4a0f      	ldr	r2, [pc, #60]	; (80002d4 <main+0x94>)
 8000298:	f043 0310 	orr.w	r3, r3, #16
 800029c:	6013      	str	r3, [r2, #0]
	GPIOC->CRH.bit.MONF13 = GPIO_CRH_MONF_OUTPUT_2M_GP_PP; //crh
 800029e:	4a0e      	ldr	r2, [pc, #56]	; (80002d8 <main+0x98>)
 80002a0:	6853      	ldr	r3, [r2, #4]
 80002a2:	2102      	movs	r1, #2
 80002a4:	f361 5317 	bfi	r3, r1, #20, #4
 80002a8:	6053      	str	r3, [r2, #4]
	//GPIOC->CRH |= (1<<21);	// CRH register sets bit 21 -> 1
	//GPIOC->CRH &= ~(1<<20); // CRH register sets bit 20 -> 0

    /* Loop forever */
	for(;;){
		delay_ms(10000);
 80002aa:	f242 7010 	movw	r0, #10000	; 0x2710
 80002ae:	f7ff ffb0 	bl	8000212 <delay_ms>
		GPIOC->ODR.bit.PIN13 = 1;
 80002b2:	4a09      	ldr	r2, [pc, #36]	; (80002d8 <main+0x98>)
 80002b4:	8993      	ldrh	r3, [r2, #12]
 80002b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002ba:	8193      	strh	r3, [r2, #12]
		delay_ms(1000);
 80002bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002c0:	f7ff ffa7 	bl	8000212 <delay_ms>
		GPIOC->ODR.bit.PIN13 = 0;
 80002c4:	4a04      	ldr	r2, [pc, #16]	; (80002d8 <main+0x98>)
 80002c6:	8993      	ldrh	r3, [r2, #12]
 80002c8:	f36f 334d 	bfc	r3, #13, #1
 80002cc:	8193      	strh	r3, [r2, #12]
		delay_ms(10000);
 80002ce:	e7ec      	b.n	80002aa <main+0x6a>
 80002d0:	4002101c 	.word	0x4002101c
 80002d4:	40021018 	.word	0x40021018
 80002d8:	40011000 	.word	0x40011000

080002dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002dc:	480d      	ldr	r0, [pc, #52]	; (8000314 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002e0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002e4:	480c      	ldr	r0, [pc, #48]	; (8000318 <LoopForever+0x6>)
  ldr r1, =_edata
 80002e6:	490d      	ldr	r1, [pc, #52]	; (800031c <LoopForever+0xa>)
  ldr r2, =_sidata
 80002e8:	4a0d      	ldr	r2, [pc, #52]	; (8000320 <LoopForever+0xe>)
  movs r3, #0
 80002ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002ec:	e002      	b.n	80002f4 <LoopCopyDataInit>

080002ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002f2:	3304      	adds	r3, #4

080002f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002f8:	d3f9      	bcc.n	80002ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002fa:	4a0a      	ldr	r2, [pc, #40]	; (8000324 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002fc:	4c0a      	ldr	r4, [pc, #40]	; (8000328 <LoopForever+0x16>)
  movs r3, #0
 80002fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000300:	e001      	b.n	8000306 <LoopFillZerobss>

08000302 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000302:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000304:	3204      	adds	r2, #4

08000306 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000306:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000308:	d3fb      	bcc.n	8000302 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800030a:	f000 f811 	bl	8000330 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800030e:	f7ff ff97 	bl	8000240 <main>

08000312 <LoopForever>:

LoopForever:
  b LoopForever
 8000312:	e7fe      	b.n	8000312 <LoopForever>
  ldr   r0, =_estack
 8000314:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000318:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800031c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000320:	08000398 	.word	0x08000398
  ldr r2, =_sbss
 8000324:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000328:	2000001c 	.word	0x2000001c

0800032c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800032c:	e7fe      	b.n	800032c <ADC1_2_IRQHandler>
	...

08000330 <__libc_init_array>:
 8000330:	b570      	push	{r4, r5, r6, lr}
 8000332:	2600      	movs	r6, #0
 8000334:	4d0c      	ldr	r5, [pc, #48]	; (8000368 <__libc_init_array+0x38>)
 8000336:	4c0d      	ldr	r4, [pc, #52]	; (800036c <__libc_init_array+0x3c>)
 8000338:	1b64      	subs	r4, r4, r5
 800033a:	10a4      	asrs	r4, r4, #2
 800033c:	42a6      	cmp	r6, r4
 800033e:	d109      	bne.n	8000354 <__libc_init_array+0x24>
 8000340:	f000 f81a 	bl	8000378 <_init>
 8000344:	2600      	movs	r6, #0
 8000346:	4d0a      	ldr	r5, [pc, #40]	; (8000370 <__libc_init_array+0x40>)
 8000348:	4c0a      	ldr	r4, [pc, #40]	; (8000374 <__libc_init_array+0x44>)
 800034a:	1b64      	subs	r4, r4, r5
 800034c:	10a4      	asrs	r4, r4, #2
 800034e:	42a6      	cmp	r6, r4
 8000350:	d105      	bne.n	800035e <__libc_init_array+0x2e>
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f855 3b04 	ldr.w	r3, [r5], #4
 8000358:	4798      	blx	r3
 800035a:	3601      	adds	r6, #1
 800035c:	e7ee      	b.n	800033c <__libc_init_array+0xc>
 800035e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000362:	4798      	blx	r3
 8000364:	3601      	adds	r6, #1
 8000366:	e7f2      	b.n	800034e <__libc_init_array+0x1e>
 8000368:	08000390 	.word	0x08000390
 800036c:	08000390 	.word	0x08000390
 8000370:	08000390 	.word	0x08000390
 8000374:	08000394 	.word	0x08000394

08000378 <_init>:
 8000378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800037a:	bf00      	nop
 800037c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800037e:	bc08      	pop	{r3}
 8000380:	469e      	mov	lr, r3
 8000382:	4770      	bx	lr

08000384 <_fini>:
 8000384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000386:	bf00      	nop
 8000388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800038a:	bc08      	pop	{r3}
 800038c:	469e      	mov	lr, r3
 800038e:	4770      	bx	lr
